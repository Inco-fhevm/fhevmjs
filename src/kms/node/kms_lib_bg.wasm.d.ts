/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function __wbg_client_free(a: number): void;
export function __wbg_requestid_free(a: number): void;
export function __wbg_reencryptionrequestpayload_free(a: number): void;
export function __wbg_get_reencryptionrequestpayload_version(a: number): number;
export function __wbg_set_reencryptionrequestpayload_version(a: number, b: number): void;
export function __wbg_get_reencryptionrequestpayload_servers_needed(a: number): number;
export function __wbg_set_reencryptionrequestpayload_servers_needed(a: number, b: number): void;
export function __wbg_get_reencryptionrequestpayload_randomness(a: number, b: number): void;
export function __wbg_get_reencryptionrequestpayload_fhe_type(a: number): number;
export function __wbg_set_reencryptionrequestpayload_fhe_type(a: number, b: number): void;
export function __wbg_get_reencryptionrequestpayload_key_id(a: number): number;
export function __wbg_set_reencryptionrequestpayload_key_id(a: number, b: number): void;
export function __wbg_get_reencryptionrequestpayload_ciphertext(a: number, b: number): void;
export function __wbg_set_reencryptionrequestpayload_ciphertext(a: number, b: number, c: number): void;
export function __wbg_get_reencryptionrequestpayload_ciphertext_digest(a: number, b: number): void;
export function __wbg_eip712domainmsg_free(a: number): void;
export function __wbg_get_eip712domainmsg_name(a: number, b: number): void;
export function __wbg_set_eip712domainmsg_name(a: number, b: number, c: number): void;
export function __wbg_get_eip712domainmsg_version(a: number, b: number): void;
export function __wbg_set_eip712domainmsg_version(a: number, b: number, c: number): void;
export function __wbg_get_eip712domainmsg_chain_id(a: number, b: number): void;
export function __wbg_set_eip712domainmsg_chain_id(a: number, b: number, c: number): void;
export function __wbg_get_eip712domainmsg_verifying_contract(a: number, b: number): void;
export function __wbg_set_eip712domainmsg_verifying_contract(a: number, b: number, c: number): void;
export function __wbg_get_eip712domainmsg_salt(a: number, b: number): void;
export function __wbg_set_eip712domainmsg_salt(a: number, b: number, c: number): void;
export function __wbg_reencryptionrequest_free(a: number): void;
export function __wbg_get_reencryptionrequest_signature(a: number, b: number): void;
export function __wbg_get_reencryptionrequest_payload(a: number): number;
export function __wbg_set_reencryptionrequest_payload(a: number, b: number): void;
export function __wbg_get_reencryptionrequest_domain(a: number): number;
export function __wbg_set_reencryptionrequest_domain(a: number, b: number): void;
export function __wbg_get_reencryptionrequest_request_id(a: number): number;
export function __wbg_set_reencryptionrequest_request_id(a: number, b: number): void;
export function __wbg_reencryptionresponse_free(a: number): void;
export function __wbg_get_reencryptionresponse_version(a: number): number;
export function __wbg_set_reencryptionresponse_version(a: number, b: number): void;
export function __wbg_get_reencryptionresponse_servers_needed(a: number): number;
export function __wbg_set_reencryptionresponse_servers_needed(a: number, b: number): void;
export function __wbg_get_reencryptionresponse_fhe_type(a: number): number;
export function __wbg_set_reencryptionresponse_fhe_type(a: number, b: number): void;
export function __wbg_get_reencryptionrequestpayload_enc_key(a: number, b: number): void;
export function __wbg_get_reencryptionrequestpayload_verification_key(a: number, b: number): void;
export function __wbg_get_reencryptionresponse_verification_key(a: number, b: number): void;
export function __wbg_get_reencryptionresponse_digest(a: number, b: number): void;
export function __wbg_get_reencryptionresponse_signcrypted_ciphertext(a: number, b: number): void;
export function __wbg_get_requestid_request_id(a: number, b: number): void;
export function __wbg_set_requestid_request_id(a: number, b: number, c: number): void;
export function __wbg_set_reencryptionrequestpayload_verification_key(a: number, b: number, c: number): void;
export function __wbg_set_reencryptionrequestpayload_randomness(a: number, b: number, c: number): void;
export function __wbg_set_reencryptionrequestpayload_enc_key(a: number, b: number, c: number): void;
export function __wbg_set_reencryptionrequestpayload_ciphertext_digest(a: number, b: number, c: number): void;
export function __wbg_set_reencryptionrequest_signature(a: number, b: number, c: number): void;
export function __wbg_set_reencryptionresponse_verification_key(a: number, b: number, c: number): void;
export function __wbg_set_reencryptionresponse_digest(a: number, b: number, c: number): void;
export function __wbg_set_reencryptionresponse_signcrypted_ciphertext(a: number, b: number, c: number): void;
export function __wbg_plaintext_free(a: number): void;
export function __wbg_get_plaintext_lowest_bits(a: number): number;
export function __wbg_set_plaintext_lowest_bits(a: number, b: number): void;
export function __wbg_get_plaintext_middle_bits(a: number): number;
export function __wbg_set_plaintext_middle_bits(a: number, b: number): void;
export function __wbg_get_plaintext_higest_bits(a: number): number;
export function __wbg_set_plaintext_higest_bits(a: number, b: number): void;
export function new_client(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function __wbg_cryptoboxct_free(a: number): void;
export function cryptobox_keygen(): number;
export function cryptobox_get_pk(a: number): number;
export function cryptobox_pk_to_u8vec(a: number, b: number): void;
export function cryptobox_sk_to_u8vec(a: number, b: number): void;
export function u8vec_to_cryptobox_pk(a: number, b: number, c: number): void;
export function u8vec_to_cryptobox_sk(a: number, b: number, c: number): void;
export function cryptobox_encrypt(a: number, b: number, c: number, d: number): number;
export function cryptobox_decrypt(a: number, b: number, c: number, d: number): void;
export function make_reencryption_req(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number): void;
export function process_reencryption_resp(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): void;
export function __wbg_publicenckey_free(a: number): void;
export function __wbg_privateenckey_free(a: number): void;
export function __wbg_publicsigkey_free(a: number): void;
export function __wbg_privatesigkey_free(a: number): void;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_free(a: number, b: number, c: number): void;
export function __wbindgen_malloc(a: number, b: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number, d: number): number;
export function __wbindgen_exn_store(a: number): void;
